# -*- coding: utf-8 -*-
"""ai_analysis_on_student_portfolio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fVQvFjjAWwTgJXKsxJylKktV_uditB2d
"""

!pip install pymongo
!pip install google-generativeai

from pymongo import MongoClient
client = MongoClient("")
db = client["edu_certify"]
collection = db["students"]

def get_student_data(portfolioTokenid):
    student = collection.find_one({"portfolioTokenid": portfolioTokenid})
    return student
student_data = get_student_data("<input_portfolio_id>")
print(student_data)

#%%writefile .env
#API_KEY=""

!pip install python-dotenv

import os
from dotenv import load_dotenv
load_dotenv()
api_key = os.getenv("API_KEY")

import google.generativeai as genai
genai.configure(api_key=api_key)

student_data = {
    "course_progress": {
        "Data dtructures": 80,
        "Deep learning": 100,
        "Blockchain": 20
    },
    "quiz_scores": {
        "Data structures": [80, 95],
        "Deep learning": [98, 85],
        "Blockchain": [30, 20]
    },
    "grades": {
        "Data structures": "A",
        "Deep learning": "A",
        "Blockchain": "F"
    },
    "projects": {
        "Data structures": "Completed",
        "Deep learning": "In Progress",
        "Blockchain": "Not Started"
    }
}

def analyze_performance(student_data):
    prompt = f"""
    Analyze this studentâ€™s academic performance and identify skill gaps:
    Course Progress: {student_data['course_progress']}
    Quiz Scores: {student_data['quiz_scores']}
    Grades: {student_data['grades']}
    Project Submissions: {student_data['projects']}
    Give
    performance score (out of 100) ,skill gaps and learning recommendations,also write strengths what the student is good at and appreciate it and why in short.
    And keep this precise and short also write it like its clear to understand not in a mere parahgraph format.
    """
    model = genai.GenerativeModel("gemini-1.5-flash-latest")
    response = model.generate_content(prompt)
    return response
performance_analysis = analyze_performance(student_data)
print(performance_analysis.text)

def generate_recommendations(student_data):
    prompt = f"""
    Based on this student's performance:
    Quiz Scores: {student_data['quiz_scores']}
    Grades: {student_data['grades']}
    Skill Gaps: {performance_analysis.text}
    Suggest 3 courses to improve weak areas, 2 project ideas ,Study materials (articles, books, videos).
    keep it short and concise and write it like its clear to understand not in a mere parahgraph format.
    """
    model=genai.GenerativeModel("gemini-1.5-flash-latest")
    response=model.generate_content(prompt)
    return response.text

recommendations = generate_recommendations(student_data)
print(recommendations)

def check_badge_eligibility(student_data):
    prompt = f"""
Evaluate if this student qualifies for a badge based on strict merit:

Course Progress: {student_data['course_progress']}
Quiz Scores: {student_data['quiz_scores']}
Grades: {student_data['grades']}
Project Completion: {student_data['projects']}

**Badge Criteria:**
- **"DSA Mastery Badge"**: Awarded only if:
  - Data Structure related course completion is **80%+**
  - Average quiz score is **80%+**
  - Data Structure project is **fully completed**

- **"AI Expert Badge"**: Awarded only if:
  - AI-related course (e.g., Deep Learning) completion is **0%+**
  - Average quiz score is **80%+**
  - AI-related project is **fully completed**

- **"Blockchain Innovator Badge"**: Awarded only if:
  - Blockchain course completion is **80%+**
  - Average quiz score is **75%+**
  - Blockchain project is **fully completed**

### **Output Format:**
- **Eligible Badges:** List all qualified badges
- **Justification:** Clearly explain why the student qualifies (or doesn't) for each badge.
- **Suggestions:** If not eligible, suggest how to improve to earn the badges.
"""

    model=genai.GenerativeModel("gemini-1.5-flash-latest")
    response=model.generate_content(prompt)
    return response.text

badges = check_badge_eligibility(student_data)
print(badges)